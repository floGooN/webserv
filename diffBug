diff --git a/config/default.conf b/config/default.conf
index ee5f230..deac22a 100644
--- a/config/default.conf
+++ b/config/default.conf
@@ -28,11 +28,12 @@ http
             autoindex off
         }
         
-        location /formulaires/cgi-bin/devisCalculator.pl
+        location /script.pl
         {
             root    ./website/devis.com/cgi-bin
-            index   devisCalculator.pl
+            index   script.pl
             autoindex   off
+            methods_accept POST
         }
 
         location /upload
@@ -48,7 +49,7 @@ http
        listen                  3030
         server_name            rperrot.com   127.2.2.2
        root                    ./website/kapouet
-       client_max_body_size    5M
+       client_max_body_size    1M
        upload_path             ./uploads/kapouet
        methods_accept           GET
 
@@ -61,7 +62,13 @@ http
         {
             root    ./uploads/kapouet
             autoindex   on
-            methods_accept POST DELETE
+            methods_accept POST
         }
+        
+        location /formUpload.html
+        {
+            return 302 https://www.nvidia.com/en-us/
+        }
+        
    }
 }
diff --git a/config/test.conf b/config/test.conf
index 7d9dba5..054e7f5 100644
--- a/config/test.conf
+++ b/config/test.conf
@@ -66,5 +66,11 @@ http
             autoindex on
             methods_accept GET
         }
+        
+        location /redirect.html
+        {
+           return 302 ./website/devis.com/formulaires/form.html
+        }
+
    }
 }
\ No newline at end of file
diff --git a/sources/CGI.cpp b/sources/CGI.cpp
index 662564f..ccc184e 100644
--- a/sources/CGI.cpp
+++ b/sources/CGI.cpp
@@ -78,6 +78,11 @@ char** initEnv(const Request &req)
     for (int i = 0; i < environSize; i++) 
     {
         envCGI[i] = new char[environnement[i].size() + 1];
+        if (!envCGI[i])
+        {
+            freeEnv(envCGI);
+            return NULL;
+        }
         strcpy(envCGI[i], environnement[i].c_str());
     }
     // si new crash dans la boucle
@@ -96,8 +101,8 @@ std::string buildPathInfo(const std::string &path)
     std::string cgi_path_other = "support.py";
 
     if (UtilParsing::recoverExtension(path) == UtilParsing::recoverExtension(cgi_path))
-        return "/usr/bin/perl"; // mettre MACRO 
-    return "/usr/bin/python3"; // mettre MACRO 
+        return DFLT_PATH_PERL;
+    return DFLT_PATH_PY;
 }
 
 /*----------------------------------------------------------------------------*/
@@ -201,7 +206,8 @@ void childProcessCgi(char**env, int *pipe_in, int *pipe_out, const Request &req)
     std::string road = buildPathInfo(script);
     const char *args[] = {road.c_str(), script.c_str(), NULL};
     execve(args[0], (char *const *)args, env);
-    //free env
+    if (env != NULL)
+        freeEnv(env);
     _exit(1);
 }
 
diff --git a/sources/Client.cpp b/sources/Client.cpp
index 9bdb1c9..f598a1b 100644
--- a/sources/Client.cpp
+++ b/sources/Client.cpp
@@ -65,11 +65,12 @@ std::ostream & operator<<(std::ostream &o, const Client &ref)
 /*============================================================================*/
 void	Client::checkRequestValidity() throw (ErrorHandler)
 {
-	std::cout	<< GREEN "Client::checkRequestValidity():"
+	std::cout	<< GREEN "Client::checkRequestValidity():\n"
+				<< "URL: " << request.getHeader().uri
 				<< RESET << std::endl;
 
 	const t_location *currentLocation = NULL;
-	
+
 	if (request.getHeader().requestType == DELETE)
 	{
 		request.completeUri = (request.getHeader().uri[0] == '/' ? "./uploads" : "./uploads/") + request.getHeader().uri;
@@ -77,7 +78,14 @@ void	Client::checkRequestValidity() throw (ErrorHandler)
 		return;
 	}
 	else
+	{
 		currentLocation = buildCompleteUri();
+		if (currentLocation && !currentLocation->redirect.empty())
+		{
+			std::cout << "rentre" << std::endl;
+			return;
+		}
+	}
 
 	checkAutorisation(currentLocation);
 	
@@ -164,7 +172,12 @@ const t_location * Client::buildCompleteUri()
 	std::string			rootPart;
 	std::string			uriPart;
 	const t_location	*result = UtilParsing::findLocation(clientServer->getLocationSet(), request.getHeader().uri);
-	
+	// std::cout << request.getHeader().uri << std::endl;
+	if (result && ! result->redirect.empty())
+	{
+		std::cout << "rentre dans la redirection de complete uri" << std::endl;
+		return result;
+	}
 	if (result && ! result->root.empty() )
 		rootPart = result->root;
 	else
@@ -213,10 +226,9 @@ void Client::checkAutorisation(const t_location *current) const throw (ErrorHand
 		}
 		itStart++;
 	}
-	// jai commenter car sinon le script ne voulais pas etre uri 
-	// if (!found) { 
-	// 	throw ErrorHandler(ERR_405, "Method not allowed in this service");
-	// }
+	if (!found) { 
+		throw ErrorHandler(ERR_405, "Method not allowed in this service");
+	}
 }
 /*----------------------------------------------------------------------------*/
 
diff --git a/sources/Cluster.cpp b/sources/Cluster.cpp
index 99819a9..9aa5918 100644
--- a/sources/Cluster.cpp
+++ b/sources/Cluster.cpp
@@ -304,7 +304,7 @@ void	Cluster::recvData(const struct epoll_event &event)
 			throw ErrGenerator(currentClient, e.errorNumber, e.errorLog);
 		}	
 	}
-
+	std::cout << RED << currentClient.request.getHeader().uri << RESET << std::endl;
 	currentClient.totalBytesReceived += bytesReceived;
 
 	if (currentClient.request.getbody().body.size() == \
diff --git a/sources/Redirect.cpp b/sources/Redirect.cpp
deleted file mode 100644
index 9bc7766..0000000
--- a/sources/Redirect.cpp
+++ /dev/null
@@ -1,39 +0,0 @@
-
-
-
-
-
-
-#include "UtilParsing.hpp"
-#include "CGI.hpp"
-
-std::string processRedirect(const Client &client) throw (ErrorHandler)
-{
-    std::string res;
-    const t_location *current = UtilParsing::findLocation(client.clientServer->getLocationSet(), client.request.getHeader().uri);
-    if (current == NULL)
-        throw ErrorHandler(ERR_404);
-    if (controlValuesRedirect(current->redirect) != true)
-        throw ErrorHandler(ERR_404); // ici voir l'erreur a mettre
-    res = buildBodyRedirect(current->redirect);
-    return res;
-}
-
-bool controlValuesRedirect(const std::vector<std::string> &vec)
-{
-    if (vec.size() != 2)
-        return false;
-    if (*vec.begin() != std::string("301") || *vec.begin() != std::string("302"))
-        return false;
-    return true;
-}
-
-std::string buildBodyRedirect(const std::vector<std::string> &vec)
-{
-    std::string body;
-
-    body = "<html>\n<head>\n<style>body {display: flex;justify-content: center;flex-direction: column;align-items: center;height: 100vh;font-family: 'Poppins', sans-serif;font-weight: 300;font-size: 15px;line-height: 1.7;color: #c4c3ca;background-color: #1f2029;overflow-x: hidden;margin: 0;} a { font-size: 30px;}</style><title>List</title>\n</head>\n<body>\n<h1>Redirection" + vec[0] + "</h1>\n";
-    body += "\n<a href=\"" + vec[1] + "> Redirection </a>";
-    body += "\n</body></html>";
-    return body;
-}
diff --git a/sources/Response.cpp b/sources/Response.cpp
index b8e7c0d..1d65410 100644
--- a/sources/Response.cpp
+++ b/sources/Response.cpp
@@ -60,12 +60,17 @@ void	Response::getQuery(const Client &client)
 {
 	std::cout << BRIGHT_GREEN "GET QUERY" RESET << std::endl;
 
-	if (isCGI(client) == true) 
+	if (isRedirect(client))
+	{
+		std::cout << "rentre dans la reponse isRedirect" << std::endl;
+		message = setHeaderRedirect(client, client.request);
+
+		return ;
+	}
+	else if (isCGI(client) == true) 
 		message = processCGI(client);
 	else if (isRepository(client) == true)
 		message = processAutoIndex(client);
-	else if (isRedirect(client) == true)
-		message = processRedirect(client);
 	else
 		UtilParsing::readFile(client.request.completeUri, message);
 
@@ -106,22 +111,13 @@ void	Response::postQuery(Client &client)
 
 void	Response::deleteQuery(const Client &client)
 {
-	std::cout << BRIGHT_CYAN "DELETE QUERY" << RESET << std::endl;
-
 	char		path[100];
 
-    std::cout	<< BRIGHT_YELLOW << client.request.completeUri << RESET
-				<< std::endl;
-
 	if (realpath(client.request.completeUri.c_str(), path) == NULL) {
 		if (errno == ENOENT)
 			throw ErrorHandler(ERR_404, "File to delete not found");
 		throw ErrorHandler(ERR_400, "realpath() in DELETE, invalid path");
 	}
-	// else if (basePath.compare(0, basePath.size(), path) != 0)
-	// 	throw ErrorHandler(ERR_403, "realpath() in DELETE, invalid path");
-    std::cout	<< BRIGHT_RED << path << RESET 
-				<< std::endl;
 	if (access(path, F_OK) == -1)
 		throw ErrorHandler(ERR_404, "Not found in delete()");
 	else if (access(path, W_OK) == -1)
@@ -211,8 +207,7 @@ std::string	&Response::findMimeType(const std::string &uri)
 
 std::string	Response::setHeader(const Request &req, const std::string &code) throw (ErrorHandler)
 {
-	std::ostringstream oss;
-	oss << message.length();
+	std::ostringstream oss;//managebazar;
 
 	if (oss.fail())
 		throw ErrorHandler(ERR_500, "In Response::setHeader()\nconversion of the length message faild");
@@ -231,47 +226,35 @@ std::string	Response::setHeader(const Request &req, const std::string &code) thr
 
 std::string	Response::setHeaderRedirect(const Client &client, const Request &req) throw (ErrorHandler)
 {
-	std::ostringstream oss;
-	oss << message.length();
+	(void)req;
+	// std::ostringstream oss;
+	// oss << message.length();
 
-	if (oss.fail())
-		throw ErrorHandler(ERR_500, "In Response::setHeader()\nconversion of the length message faild");
+	// if (oss.fail())
+	// 	throw ErrorHandler(ERR_500, "In Response::setHeader()\nconversion of the length message faild");
 	const t_location *current = UtilParsing::findLocation(client.clientServer->getLocationSet(), client.request.getHeader().uri);
-	
+	if (!current)
+		throw ErrorHandler(ERR_444);
 	std::string header = \
-		PROTOCOL_VERION " " + current->redirect[0] + "\r\n" \
+		PROTOCOL_VERION " " + current->redirect[0]+ " Found" + "\r\n" \
 		"Server: Rob&Flo V0.9" + "\r\n" \
-		"Content-Type: " + findMimeType(req.completeUri) + "; charset=UTF-8\r\n" \
-		"Content-Length: " + oss.str() + "\r\n" \
-		"Connection: " + (req.keepAlive == true ? "keep-alive" : "close") +
-		"Location" + current->redirect[1] +
-		 "\r\n" \
+		"Content-Type: " + "text/html" + "; charset=UTF-8\r\n" 
+		"Content-Length: 0\r\n"
+		"Connection: " +  "close \r\n" +
+		"Location:" + current->redirect[1] + "\r\n" \
 		"\r\n";
 
-
 	return header;	
 }
 /*----------------------------------------------------------------------------*/
 
-// prendre les redirect pour verifier .
 bool	Response::isRedirect(Client client)
 {
 	const t_location *current = UtilParsing::findLocation(client.clientServer->getLocationSet(), client.request.getHeader().uri);
-	if (current == NULL)
-	{
-		std::cout << "rentre1" << std::endl;
-		return false;
-	}
-	std::cout << current->redirect[0] << std::endl;
-	if (current->redirect[0] == "")
-	{
-		std::cout << "rentre" << std::endl;
-		return false;
-	}
-	return true;
+	if (current && ! current->redirect.empty())
+		return true;
+	return false;
 }
-
-
 /*----------------------------------------------------------------------------*/
 
 
diff --git a/sources/Response.hpp b/sources/Response.hpp
index 06a2277..f8032a4 100644
--- a/sources/Response.hpp
+++ b/sources/Response.hpp
@@ -34,11 +34,11 @@ class Response
 	private:
 		std::map<std::string, std::string>	_mimeMap;
 
-		void		initMimeMap();
-		void		uploadFile(const Client &) throw (ErrorHandler);
-		bool	isCGI(Client client) throw (ErrorHandler);
-		bool isRepository(Client client) throw (ErrorHandler);
+		void	initMimeMap();
+		void	uploadFile(const Client &) throw (ErrorHandler);
 		bool	isRedirect(Client client);
+		bool	isCGI(Client client) throw (ErrorHandler);
+		bool	isRepository(Client client) throw (ErrorHandler);
 		std::string	&findMimeType(const std::string &uri);
 		std::string	extractFilename(const std::string &bodyHeader) throw (ErrorHandler);
 		std::string	setHeader(const Request &, const std::string &) throw (ErrorHandler);
diff --git a/sources/includes/webserv.hpp b/sources/includes/webserv.hpp
index 2e18d9a..d3f8219 100644
--- a/sources/includes/webserv.hpp
+++ b/sources/includes/webserv.hpp
@@ -40,6 +40,8 @@
 # define DFLT_HOSTNAME		"localhost"
 # define DFLT_MIME_TYPE		"application/octet-stream"
 # define DFLT_CONTENT_TYPE	"application/x-www-form-urlencoded"
+# define DFLT_PATH_PERL		"/usr/bin/perl"
+# define DFLT_PATH_PY		"/usr/bin/python3"
 
 # define	DFLT_ERRORPAGE		"<!DOCTYPE html>" \
 								"<html lang=\"fr\">" \
@@ -73,6 +75,9 @@
 # define	COD_201	"201 Created"
 # define	COD_204	"204 No Content"
 
+# define	COD_301 "Moved Permanently"
+# define	COD_302 "Found"
+
 # define	ERR_400	"400 Bad Request"
 # define	ERR_403	"403 Forbidden"
 # define	ERR_404	"404 Not Found"
diff --git a/sources/main.cpp b/sources/main.cpp
index a184f9d..72fac17 100644
--- a/sources/main.cpp
+++ b/sources/main.cpp
@@ -19,7 +19,7 @@ int main(int argc, char **argv)
     sigaction(SIGINT, &act, NULL);
 
     try {
-        Cluster cluster(argc > 1 ? argv[1] : "./config/default.conf");
+        Cluster cluster(argc > 1 ? argv[1] : "./config/test.conf");
         // std::cout << cluster.getConfig();
         cluster.runCluster();
     }
diff --git a/website/kapouet/formUpload.html b/website/kapouet/formUpload.html
deleted file mode 100644
index 792f023..0000000
--- a/website/kapouet/formUpload.html
+++ /dev/null
@@ -1,14 +0,0 @@
-<!DOCTYPE html>
-<html lang="fr">
-<head>
-    <meta charset="UTF-8">
-    <title>Form Upload KAPOUET</title>
-</head>
-<body>
-    <h1>File Upload KAPOUET</h1>
-    <form action="/upload" method="POST" enctype="multipart/form-data">
-        <input type="file" name="fileToUpload" required>
-        <input type="submit" value="upload">
-    </form>
-</body>
-</html>
